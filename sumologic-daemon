#!/usr/bin/env python3
import os
from os.path import join as ospj
import sys
import platform
import signal
import time
from SumoLogic.constants import *

# sumologic     Bring up/down the SumoLogic daemon
#
# chkconfig: 2345 98 02
# description: Activates/Deactivates the
#    SumoLogic daemon to send log files to sumologic
#
###############################################


SUMOLOGIC_CFG = ospj(CONFIG_DIR, CONFIG_FILE)
SUMOLOGIC_USER_CFG = ospj(USER_CONFIG_DIR, CONFIG_FILE)

PYTHON_BIN = '/usr/bin/env python3'

distro = platform.uname()[3]
distro2 = platform.uname()[2]
if distro.find('Debian') >= 0:
    SUMOLOGIC_PY = "/usr/local/bin/sumologic.py"
elif distro.find('FreeBSD') >= 0:
    SUMOLOGIC_PY = "/usr/local/bin/sumologic.py"
else:
    #centos
    if distro2.find('el6') >= 0 or distro2.find('el7') >= 0:
        SUMOLOGIC_PY = "/usr/bin/sumologic.py"
    else:
        SUMOLOGIC_PY = "/usr/sbin/sumologic.py"

###############################################
###############################################
#            Do not edit below                #
###############################################
###############################################


SUMOLOGIC_BIN = '{0} {1}'.format(PYTHON_BIN, SUMOLOGIC_PY)

# make sure 'ps' command is accessible (which should be
# in either /usr/bin or /bin.  Modify the PATH so
# popen can find it
env = os.environ.get('PATH', "")
os.environ['PATH'] = '/usr/bin:/bin:{0}'.format(env)

STATE_NOT_RUNNING = -1
STATE_LOCK_EXISTS = -2


def usage():
    print(
        'Usage: {0} {start [args...] | stop | restart | status '.format(
            sys.argv[0]
        )
    )
    print()
    print('For a list of valid "args" refer to:')
    print("$ sumologic.py --help")
    print()
    sys.exit(0)


def getpid():
    pid = 0
    if os.path.exists(PID_FILE):
        with open(PID_FILE, "r") as fp:
            line_pid = int(fp.readline().rstrip())
            if line_pid is not None and line_pid != 0:
                pid = line_pid
    child_pids = []
    for pid_files in os.walk(PID_DIRECTORY):
        for dir_entries in pid_files:
            if dir_entries == PID_DIRECTORY or len(dir_entries) == 0:
                continue
            for pid_file in dir_entries:
                if(os.path.isfile(ospj(PID_DIRECTORY, pid_file))):
                    with open(ospj(PID_DIRECTORY, pid_file)) as cpfh:
                        line_pid = int(cpfh.readline().rstrip())
                        if line_pid is not None and line_pid != 0:
                            child_pids.append(line_pid)
    if pid == 0 and len(child_pids) == 0:
        return STATE_NOT_RUNNING

    if sys.platform.startswith('freebsd') is False and os.access('/proc', os.F_OK):
        if pid != 0:
            # proc filesystem exists, look for pid
            if default_pid_check(pid):
                return pid
            else:
                return STATE_LOCK_EXISTS
        running_pids = []
        for child_pid in child_pids:
            # proc filesystem exists, look for pid
            if default_pid_check(child_pid):
                running_pids.append('{}'.format(child_pid))
        if len(running_pids) == 0:
            return STATE_LOCK_EXISTS
        return ','.join(running_pids)
    else:
        if pid != 0:
            # proc filesystem doesn't exist (or it doesn't contain PIDs), use 'ps'
            if freebsd_pid_check(pid):
                return pid
            else:
                return STATE_LOCK_EXISTS
        running_pids = []
        for child_pid in child_pids:
            # proc filesystem doesn't exist (or it doesn't contain PIDs), use 'ps'
            if freebsd_pid_check(child_pid):
                running_pids.append('{}'.format(child_pid))
        if len(running_pids) == 0:
            return STATE_LOCK_EXISTS
        return ','.join(running_pids)


def default_pid_check(pid):
    # proc filesystem exists, look for pid
    pid_path = ospj('/proc', '{}'.format(pid))
    if os.access(pid_path, os.F_OK):
        return True
    return False

def freebsd_pid_check(pid):
    p = os.popen('ps -p %d' % pid, 'r')
    p.readline()  # get the header line
    pid_running = p.readline()
    # pid_running will be '' if no process is found
    if pid_running:
        return True
    return False

def start(*sargs):
    scmd = '{0} --daemon '.format(SUMOLOGIC_BIN)
    if sargs:
        scmd += ' '.join(sargs)
    message = 'starting SumoLogic:  {0}'.format(scmd)
    print(message)

    os.system(scmd)


def stop():
    pid = getpid()
    if type(pid) is str and pid != '':
        # multiple pids
        for child_pid in pid.split(','):
            os.kill(int(child_pid), signal.SIGTERM)
            print('sent SIGTERM to Child {}'.format(child_pid))
    elif pid >= 0:
        os.kill(pid, signal.SIGTERM)
        print('sent SumoLogic SIGTERM')
    else:
        print('SumoLogic is not running')


def status():
    pid = getpid()
    if pid == STATE_LOCK_EXISTS:
        print('{0} exists but SumoLogic is not running'.format(PID_FILE))
    elif pid == STATE_NOT_RUNNING:
        print('SumoLogic is not running')
    else:
        print('SumoLogic is running with pid = {0}'.format(pid))


def restart(*rargs):
    stop()
    time.sleep(1)
    start(*rargs)


if __name__ == '__main__':
    cases = {'start':       start,
             'stop':        stop,
             'status':      status,
             'restart':     restart}

    try:
        args = sys.argv[2:]
    except Exception:
        args = []

    try:
        # arg 1 should contain one of the cases above
        option = sys.argv[1]
    except Exception:
        # try to infer context (from an /etc/init.d/ script, perhaps)
        procname = os.path.basename(sys.argv[0])
        infer_dict = {
            'K': 'stop',
            'S': 'start'
        }
        option = infer_dict.get(procname[0])
        if not option:
            usage()

    try:
        if option in ('start', 'restart'):
            anystartswith = lambda prefix, xs: any(map(lambda x: x.startswith(prefix), xs))
            if not anystartswith('--config', args) and '-c' not in args:
                args.append("--config={}".format(SUMOLOGIC_CFG))
                args.append("--user_config={}".format(SUMOLOGIC_USER_CFG))

        cmd = cases[option]
        getattr(sys.modules[__name__], 'cmd')(*args)
    except Exception:
        usage()
